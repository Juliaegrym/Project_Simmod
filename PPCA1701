import random as rnd
import numpy as np
import matplotlib
matplotlib.use('TKAgg')
import matplotlib.pyplot as plt
from matplotlib import animation
from matplotlib import colors
from mpl_toolkits.mplot3d import Axes3D


# 0 = empty, 1 = prey, 2 = low_pred, 3 = top_pred
# Vector of desired species
species = [0, 1, 2, 3]

BP =            [None, 0.2, 0.7, 0.1]
DP =            [None, None, 0.1, 0.1]
CP =            [None, 0.8, 0.5, None]
MP =            [None, 0.1, 0.4, 0.8]   #moveprob
modifier =      [0, 0.2, 0.5, 0.2]     #modifiers[0] = 0 always
#smaller modifier means lower number of animals. If all modiers are 1 (except the first one) each animal has an equal chance of 1/4 to spawn in define grid.

numframes = 1000
dimensions = 100
# Threshold for overpopulation of herbivores
op_threshold = 3

colormap = colors.ListedColormap(['k','b','y','g','r'])
cm2 = colors.ListedColormap(['k','b','y'])
cm3 =colors.ListedColormap(['k','b'])
class Cell:
    def __init__(self, kind):
        self.kind = kind    # 0 = empty, 1 = prey, 2 = low_pred, 3 = top_pred , 
        self.state = 1      # States of cell, 1 = no attack this update, 2 = successful top attack this update, aka has eaten, 3 = successful low attack this update, 4 if this cell is new for this update
        self.birthprob = BP[kind]
        self.deathprob = DP[kind]
        self.catchprob = CP[kind]
        self.moveprob  = MP[kind]

    def update_cell(self, desired_species, desired_state):
        # Creates a new species in cell
        self.kind = desired_species
        self.state = desired_state
        self.birthprob = BP[desired_species]
        self.deathprob = DP[desired_species]
        self.catchprob = CP[desired_species]
        self.moveprob  = MP[desired_species]


# Function to check health of code
def healthy(place):
    if place.kind == 0:
        assert place.birthprob == BP[0]
        assert place.deathprob == DP[0]
    if place.kind == 1:
        assert place.birthprob == BP[1]
        assert place.deathprob == DP[1]
    if place.kind == 2:
        assert place.birthprob == BP[2]
        assert place.deathprob == DP[2]
    if place.kind == 3:
        assert place.birthprob == BP[3]
        assert place.deathprob == DP[3]


# Functions to count numbers of animals
def check_neighbours(i, j, grid):

    prey = 0
    prey_indices = []
    low_pred = 0
    low_pred_indices = []
    top_pred = 0
    top_pred_indices = []

    dim = len(grid)

    for k in range(3):
        for m in range(3):
            if (k == 1) and (m == 1):
                spec = 0                        # This is the cell in considerations
            else:
                s = i-1+k
                t = j-1+m

                # Checks if index is out of bounds --> index dim = 1
                # The grid is modelled as a torus, the outer bounds are connected
                if s == dim:
                    if t == dim:
                        s = 0
                        t = 0
                    else:
                        s = 0
                elif t == dim:
                    t = 0
                spec = grid[s][t].kind  # Checks the species of the cell

                if spec == 1:
                    prey += 1
                    prey_indices.append([s, t])
                elif spec == 2:
                    low_pred += 1
                    low_pred_indices.append([s, t])
                elif spec == 3:
                    top_pred += 1
                    top_pred_indices.append([s, t])

    return prey, low_pred, top_pred, prey_indices, low_pred_indices, top_pred_indices


def check_eaten_neighbours(i, j, grid):

    low_eaten = 0
    top_eaten = 0
    food = 0
    prey_4 = 0

    dim = len(grid)

    for k in range(3):
        for m in range(3):
            if (k == 1) and (m == 1):
                spec = 0                        # Defines the species of the cell
            else:
                s = i-1+k
                t = j-1+m
                if s == dim:
                    if t == dim:
                        s = 0
                        t = 0
                    else:
                        s = 0

                elif t == dim:
                    t = 0
                spec = grid[s][t].kind      # Checks the species of the cell
                food = grid[s][t].state     # Checks the state of the cell

            if (spec == 2) and (food == 3):
                low_eaten += 1
            elif (spec == 3) and (food == 2):
                top_eaten += 1
            elif spec == 1 and food == 4:
                prey_4 += 1
    return low_eaten, top_eaten, prey_4


def check_empty_cells(i, j, grid):
    empty = 0
    empty_indices = []

    dim = len(grid)

    for k in range(3):
        for m in range(3):
            if (k == 1) and (m == 1):
                spec = 1  # This is the cell in consideration
            else:
                s = i - 1 + k
                t = j - 1 + m

                # Checks if index is out of bounds --> index = 0
                # The grid is modelled as a torus, the outer bounds are connected
                if s == dim:
                    s = 0
                if t == dim:
                    t = 0
            
                spec = grid[s][t].kind  # Species of the cell

                if spec == 0:
                    empty += 1
                    empty_indices.append([s, t])

    return empty, empty_indices


def counter(grid, dim):
    # Before counting all n.o. species are set to zero
    counting_vector = [0, 0, 0, 0]      # [empty, prey, low_pred, top_pred]

    # Iterates over grid to count different species
    for i in range(dim):
        for j in range(dim):
            num = grid[i][j].kind       # Index of counting vector = species reference number
            counting_vector[num] += 1 # Ticks up when a species of that index/kind is found
    return counting_vector


def move(grid, move_from, move_to, state):
    # Moves animal from move_from to move_to
    
    old_kind = grid[move_from[0]][move_from[1]].kind
    old_state = grid[move_from[0]][move_from[1]].state
    #print('Inside move. old_kind=', old_kind, ', old_state =', old_state)

    #grid[move_to[0]][move_to[1]] = Cell(old_kind)
    #grid[move_to[0]][move_to[1]].state = old_state
    grid[move_to[0]][move_to[1]].update_cell(old_kind, old_state)

    grid[move_from[0]][move_from[1]].update_cell(0, state)


    return 


def attack(place, i, j, grid):

    # Checks what animals are inhabiting surrounding cells
    [prey, low_pred, top_pred, prey_indices, low_pred_indices, top_pred_indices] = check_neighbours(i, j, grid)

    ## Cell contains a prey
    #if (place.kind == 1) and (low_pred > 0) and 1 == 0:
        

    #    # Probability of prey surviving low level predator
    #    temp = (1 - Cell(1).catchprob)
    #    if temp == 0 and low_pred == 0:
    #        survive_prob = 1
    #    else:
    ##        survive_prob = (1 - Cell(1).catchprob) ** low_pred

        # checks if low predator eats prey
        # assigns state = 3 to eaten by low level predator
    #    r = rnd.random()
    #    if survive_prob < r:
    #        place.update_cell(0, 3)

    # Cell contains a low level predator
    if place.kind == 2:

        # Probability of prey surviving top level predator
        #survive_prob = (1 - Cell(2).catchprob) ** top_pred

        # checks if top level predator eats low level predator
        # assigns state = 2 to eaten by top level predator
        r = rnd.random()
        #if (top_pred > 0) and (survive_prob < r):
        #    place.update_cell(0, 2)

        # Checks if low level predator attacks prey in neighbourhood
        if (1 - ((1 - Cell(1).catchprob) ** prey) >= r) and (prey > 0):
            place.state = 3         # Indicates the predator has eaten

            # Removes one of the preys (that has now been eaten by the low predator)
            remove_index = int(rnd.random() * len(prey_indices))

            # Changes a random prey grid cell in neighbourhood to an empty cell with state = 3
            grid[prey_indices[remove_index][0]][prey_indices[remove_index][1]].update_cell(0, 3)

    # Cell contains top level predator
    elif place.kind == 3:
        r = rnd.random()
        if (1 - (1 - Cell(2).catchprob) ** low_pred) >= r and low_pred > 0:
            place.state = 2

            # Removes one of the low predators (that has now been eaten by the top predator)
            remove_index = int(rnd.random() * len(low_pred_indices))

            # Changes a random prey grid cell in neighbourhood to an empty cell with state = 2
            grid[low_pred_indices[remove_index][0]][low_pred_indices[remove_index][1]].update_cell(0, 2)

    healthy(place)

    return place, grid


def reproduction_old(place, i, j, grid):
    #checks for each element if there are atleast one animal that has eaten, and if so has a chance to reproduce. 
    #One eaten prey can give birth to more than one pred.


    # Checks what animals are inhabiting surrounding cells
    [prey, low_pred, top_pred, prey_indices, low_pred_indices, top_pred_indices] = check_neighbours(i, j, grid)
    [low_eaten, top_eaten] = check_eaten_neighbours(i, j, grid) #number of low and top predators that have eaten this update

    #prey dies by overpopulation
    if (place.kind == 1) and (prey >= op_threshold):
        place.update_cell(0, 1)

    elif place.kind == 2:

        # Checks if low level predator dies by natural causes
        r = rnd.random()
        if Cell(2).deathprob >= r:
            place.update_cell(0, 1)

    elif place.kind == 3:

        # Checks if top level predator dies by natural causes
        r = rnd.random()
        if Cell(3).deathprob >= r:
            place.update_cell(0, 1)

    elif place.kind == 0:
        #checks what species is most of in surrounding, if equal amount random.
        temp_V = [prey, low_pred, top_pred]
        max_species = min(temp_V)

        cc_V = []
        if max_species == 0:
            max_species = None
        else:    
            for i in range(0, 3):
                if max_species == temp_V[i]:
                    cc_V.append(i)
            if len(cc_V) > 1:
                max_species = rnd.choice(temp_V)
            else:
                max_species = cc_V[0]

        
        # Checks if the empty cell was empty from the start
        # Preys are nearby, preys can reproduce with some probability
        if max_species == 0:
            temp = (1 - Cell(1).birthprob)
            if temp == 0 and prey == 0:
                pass #0**0 = 1 enligt python
            else:
                temp = temp ** prey
            repr_prob = 1 - temp
            r = rnd.random()
            if repr_prob >= r:
                place.update_cell(1, 1)

        # low level predators can reproduce with some probability if atleast one low has eaten this round
        elif max_species == 1:
            temp = (1 - Cell(2).birthprob)
            if temp == 0 and low_pred == 0:
                pass
            else:
                temp = temp ** low_pred
            repr_prob = 1 - temp
            
            r = rnd.random()
            if repr_prob >= r and low_eaten > 0:
                place.update_cell(2, 1)

        # Top level can reproduce with some probability if atleast one top has eaten this round
        elif max_species == 2:
            temp = (1 - Cell(3).birthprob)
            if temp == 0 and top_pred == 0:
                pass
            else:
                temp = temp ** top_pred
            repr_prob = 1 - temp
            
            r = rnd.random()
            if repr_prob >= r and top_eaten > 0:
                place.update_cell(3, 1)
                print('test')
                


    healthy(place)

    if place.state != 1:
        place.state = 1

    return 


def reproduction(place, i, j, grid):
    #checks for each element if there are atleast one animal that has eaten, and if so has a chance to reproduce. 
    #One eaten prey can give birth to more than one pred.
    

    # Checks what animals are inhabiting surrounding cells
    [prey, low_pred, top_pred, prey_indices, low_pred_indices, top_pred_indices] = check_neighbours(i, j, grid)
    [low_eaten, top_eaten, prey_4] = check_eaten_neighbours(i, j, grid) #number of low and top predators that have eaten this update

    #prey dies by overpopulation
    if (place.kind == 1) and (prey >= op_threshold):
        place.update_cell(0, 1)

    elif place.kind == 2:

        # Checks if low level predator dies by natural causes
        r = rnd.random()
        if Cell(2).deathprob >= r:
            place.update_cell(0, 1)

    elif place.kind == 3:

        # Checks if top level predator dies by natural causes
        r = rnd.random()
        if Cell(3).deathprob >= r:
            place.update_cell(0, 1)

    elif place.kind == 0:
        #checks what species is most of in surrounding, if equal amount random.

        if top_pred > 0:
            if low_pred > 0:
                max_species = 3
            else:
                r = rnd.random()
                if r < 0.5:
                    max_species = 3
                else: 
                    max_species = 1 
        elif low_pred > 0: #top = 0
            max_species = 2
        elif prey > 0: #top and low = 0
            max_species = 1
        elif top_pred== 0 and low_pred == 0 and prey == 0:
            max_species = None


        # Checks if the empty cell was empty from the start
        # Preys are nearby, preys can reproduce with some probability
        if max_species == 1:
            temp = (1 - Cell(1).birthprob)
            if temp == 0 and prey == 0:
                pass #0**0 = 1 enligt python
            else:
                temp = temp ** prey
            repr_prob = 1 - temp
            r = rnd.random()
            if repr_prob >= r and prey > prey_4:
                grid[i][j].update_cell(1, 4)

        # low level predators can reproduce with some probability if atleast one low has eaten this round
        elif max_species == 2:
            temp = (1 - Cell(2).birthprob)
            if temp == 0 and low_pred == 0:
                pass
            else:
                temp = temp ** low_pred
            repr_prob = 1 - temp
            
            r = rnd.random()
            if repr_prob >= r and low_eaten > 0:
                grid[i][j].update_cell(2, 4)

        # Top level can reproduce with some probability if atleast one top has eaten this round
        elif max_species == 3:
            temp = (1 - Cell(3).birthprob)
            if temp == 0 and top_pred == 0:
                pass
            else:
                temp = temp ** top_pred
            repr_prob = 1 - temp

            r = rnd.random()
            if repr_prob >= r and top_eaten > 0:
                grid[i][j].update_cell(3, 4)
    return 


def define_grid(dim):
    # Grid of Cellular Automaton
    grid = [[0 for i in range(dim)] for j in range(dim)]

    for i in range(dim):
        for j in range(dim):
            num = int(rnd.random()*4)
            if rnd.random() < modifier[num]:
                grid[i][j] = Cell(num)
            else:
                grid[i][j] = Cell(0)

    return grid


def update(grid):
    # Performs one sweep of updating all cells in grid, based on different rules
    dim = dimensions
    new_grid = [[0 for i in range(dim)] for j in range(dim)]

    #animals attack
    for i in range(dim):
        for j in range(dim):
            state = grid[i][j]
            if state.kind != 0:
                [state, grid] = attack(state, i, j, grid)
            new_grid[i][j] = state

    #animals reproduce
    for k in range(dim):
        for l in range(dim):
            #print(new_grid[i][j].kind)
            reproduction(new_grid[k][l], k, l, grid)
            #print(new_grid[i][j].kind, '\n')

    #animals walk
    idx = generate_idx(dim)
    for i in range(len(idx)):
        # Allows all able cells (animals, not empty cells) to walk in random order

        temp = idx[i]    # Decides randomly what cell will move
        a = temp[0]
        b = temp[1]
        if new_grid[a][b].kind != 0 and new_grid[a][b].moveprob > rnd.random():
            if new_grid[a][b].state !=4:
                [empty, empty_indices] = check_empty_cells(a, b, new_grid)
                if empty > 0:
                    num = int(rnd.random() * empty)

                    # Defines where to move to, and moves the cell [a, b]
                    move_to = empty_indices[num]
                    #print('Outside before:', 'Oldkind =',new_grid[a][b].kind, ', Oldstate = ', new_grid[a][b].state,', to kind= ', new_grid[move_to[0]][move_to[1]].kind, 'to state =', new_grid[move_to[0]][move_to[1]].state)
                    move(new_grid, [a, b], move_to, 1)
                    #print('Outside after:', 'Oldkind =',new_grid[a][b].kind, ', Oldstate = ', new_grid[a][b].state,', to kind= ', new_grid[move_to[0]][move_to[1]].kind, 'to state =', new_grid[move_to[0]][move_to[1]].state)
                    #print('\n')

    #reset state of all cells before next iteration
    for i in range(dimensions):
        for j in range(dimensions):
            new_grid[i][j].state = 1
    
    grid = new_grid
    return new_grid


def generate_idx(dim):
    from random import shuffle
    idx = []
    for i in range(dim):
        for j in range(dim):
            idx.append([i, j])
    shuffle(idx)
    return idx


def cellular_automaton(steps):
    # Function to initialize a grid and call CA-update function
    # Returns the grid after steps amount of steps
    dim = dimensions
    grid = define_grid(dim)

    for i in range(steps):
        grid = update(grid)
    return grid


def run_several_ca(tries):
    # Iterates over tries ans performs cellular automaton many times for same initial values
    i = 0
    prey_list = np.zeros(tries)
    low_pred_list = np.zeros(tries)
    top_pred_list = np.zeros(tries)

    for tri in range(tries):
        ca = cellular_automaton(numframes)
        ans = counter(ca, dimensions)
        prey_list[tri] = ans[1]
        low_pred_list[tri] = ans[2]
        top_pred_list[tri] = ans[3]
        i += 1

    plot_statistics(prey_list, low_pred_list, top_pred_list, tries)


def plot_statistics(prey_list, low_pred_list, top_pred_list, x_value):
    # Plots animal populations
    matplotlib.rcParams.update({'font.size': 18})

    plt.plot(prey_list, label = 'Population of prey')
    plt.plot(low_pred_list, label = 'Population of low level predators')
    plt.plot(top_pred_list, label = 'Population of top level predators')

    zeroX = []
    zeroY = []
    #plot where  species is zero:
    for i, val in enumerate(prey_list):
        if val == 0:
            zeroX.append(i)
            zeroY.append(val)
            break
    for i, val in enumerate(low_pred_list):
        if val == 0:
            zeroX.append(i)
            zeroY.append(val)
            break
    for i, val in enumerate(top_pred_list):
        if val == 0:
            zeroX.append(i)
            zeroY.append(val)
            break
    plt.plot(zeroX, zeroY, 'o')
    plt.xlabel(str(x_value))
    plt.ylabel('N.o. animals')
    plt.title('Populations for NxN grid. N = '+str(dimensions))
    MM = max(max(prey_list), max(low_pred_list), max(top_pred_list))
    plt.text(-3, MM+11, 'BP = '+str(BP) + '\n' + 'DP = '+str(DP) + '\n'+ 'CP = '+str(CP) + '\n' + 'MP = '+str(MP) +'\n'+ 'Mod =' + str(modifier)) #numframes-65
    plt.legend()
    plt.show()


def change_over_time(dim):
    # Function to initialize a grid and call CA-update function
    # Returns the 3 vectors with numbers of different animals

    prey_list = np.zeros(numframes)
    low_pred_list = np.zeros(numframes)
    top_pred_list = np.zeros(numframes)

    grid = define_grid(dim)

    for i in range(numframes):
        ans = counter(grid, dim)
        prey_list[i] = ans[1]
        low_pred_list[i] = ans[2]
        top_pred_list[i] = ans[3]
        grid = update(grid)
    ans = counter(grid, dim)
    prey_list[-1] = ans[1]
    low_pred_list[-1] = ans[2]
    top_pred_list[-1] = ans[3]
        

    plot_statistics(prey_list, low_pred_list, top_pred_list, 'time')
    poin(prey_list, low_pred_list, top_pred_list)
    # return prey_list, low_pred_list, top_pred_list


def animate():
    global im
    grid = define_grid(dimensions)
    Pgrid = convert(grid)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    im = ax.imshow(Pgrid, cmap = colormap)
    fig.colorbar(im)
    
    temp_V = [grid]*numframes
    anim = animation.FuncAnimation(fig, anim_help, frames = temp_V, blit = False, fargs = [ax], repeat=False) #interval = 50?
    plt.show()


def anim_help(grid, ax):
    global im
    update(grid)
    Pgrid = convert(grid)
    #im.set_array(Pgrid)
    im.set_array(Pgrid)
    return im


def convert(grid):
    #converts the grid into np array
    Pgrid = np.zeros((dimensions, dimensions))
    for i in range(dimensions):
        for j in range(dimensions):
            Pgrid[i][j] = float(grid[i][j].kind)
    return Pgrid


def animAndstat():
    global prey_list, low_pred_list, top_pred_list, idx, im
    grid = define_grid(dimensions)
    Pgrid = convert(grid)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    im = ax.imshow(Pgrid, cmap = colormap)
    fig.colorbar(im)
    
    #count
    prey_list = np.zeros(numframes+1)
    low_pred_list = np.zeros(numframes+1)
    top_pred_list = np.zeros(numframes+1)
    ans = counter(grid, dimensions)
    prey_list[0] = ans[1]
    low_pred_list[0] = ans[2]
    top_pred_list[0] = ans[3]

    temp_V = [grid]*numframes
    idx = 1
    anim = animation.FuncAnimation(fig, anim_help_2, frames = temp_V, blit = False, fargs = [ax], repeat=False) #interval = 50?
    
    plt.show()
    plt.figure(2)
    plot_statistics(prey_list, low_pred_list, top_pred_list, 'Frames')
    plt.show()
    poin(prey_list, low_pred_list, top_pred_list)

def anim_help_2(grid, ax):
    global prey_list, low_pred_list, top_pred_list, idx, im
    update(grid)
    
    #count
    ans = counter(grid, dimensions)
    prey_list[idx] = ans[1]
    low_pred_list[idx] = ans[2]
    top_pred_list[idx] = ans[3]

    Pgrid = convert(grid)
    #im.set_array(Pgrid)
    im.set_array(Pgrid)
    idx +=1
    return im

    
def poin(prey_list, low_pred_list, top_pred_list):
    with
    
    
    fig = plt.figure(3)
    ax = Axes3D(fig)
    ax.scatter(prey_list, low_pred_list, top_pred_list)
    plt.show()
    return 

#-------------------------------------------------------------------------------------------------------------------------------------------------------

change_over_time(dimensions)
#animAndstat()
